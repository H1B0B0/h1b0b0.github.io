---
interface Props {
  title: string;
  tagline?: string;
  align?: "start" | "center";
  showCVButton?: boolean;
}

const { align = "center", tagline, title, showCVButton = false } = Astro.props;
---

<div class:list={["hero stack gap-4", align]}>
  <div class="stack gap-2">
    <h1 class="title">{title}</h1>
    {tagline && <p class="tagline">{tagline}</p>}
    {
      showCVButton && (
        <a
          href="/assets/CV_2025-01-26_Etienne_Mentrel.pdf"
          download
          class="cv-button"
          id="downloadBtn"
        >
          <div class="button-content">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              class="download-icon"
            >
              <path
                fill="currentColor"
                d="M12 16l-5-5h3V4h4v7h3l-5 5zm-5 4h10v-2H7v2z"
              />
            </svg>
            <span>Download CV</span>
          </div>
          <div class="download-progress" />
        </a>
      )
    }
  </div>
  <slot />
</div>

<script>
  import anime from "animejs";

  function initHeroAnimation() {
    const title = document.querySelector(".title");
    const tagline = document.querySelector(".tagline");
    const slot = document.querySelector(".slot");

    anime
      .timeline({
        easing: "cubicBezier(.16, 1, .3, 1)",
      })
      .add({
        targets: title,
        opacity: [0, 1],
        translateY: [30, 0],
        duration: 800,
        clipPath: [
          "polygon(0 0, 0 0, 0 100%, 0 100%)",
          "polygon(0 0, 100% 0, 100% 100%, 0 100%)",
        ],
      })
      .add(
        {
          targets: tagline,
          opacity: [0, 1],
          translateY: [20, 0],
          duration: 600,
        },
        "-=400"
      )
      .add(
        {
          targets: slot,
          opacity: [0, 1],
          translateY: [20, 0],
          duration: 600,
        },
        "-=400"
      );

    const downloadBtn = document.getElementById("downloadBtn");
    if (downloadBtn) {
      downloadBtn.addEventListener("click", () => {
        const progress = downloadBtn.querySelector(".download-progress");
        const icon = downloadBtn.querySelector(".download-icon");

        // Animation du bouton
        anime
          .timeline({
            easing: "cubicBezier(0.16, 1, 0.3, 1)",
          })
          .add({
            targets: downloadBtn,
            scale: [1, 0.98],
            duration: 100,
          })
          .add({
            targets: progress,
            width: ["0%", "100%"],
            duration: 800,
            complete: () => {
              anime({
                targets: icon,
                translateY: [0, 5, 0],
                duration: 400,
                easing: "easeOutBack",
              });
            },
          })
          .add({
            targets: downloadBtn,
            scale: 1,
            duration: 200,
          });

        // Réinitialiser la barre de progression
        setTimeout(() => {
          progress.style.width = "0%";
        }, 1200);
      });
    }
  }

  document.addEventListener("astro:page-load", initHeroAnimation);
  window.addEventListener("astro:after-swap", initHeroAnimation);
</script>

<style>
  .hero {
    font-size: var(--text-lg);
    text-align: center;
  }

  .title,
  .tagline {
    max-width: 37ch;
    margin-inline: auto;
  }

  .title {
    font-size: var(--text-3xl);
    color: var(--gray-0);
    opacity: 0;
    clip-path: polygon(0 0, 0 0, 0 100%, 0 100%);
  }

  .tagline {
    opacity: 0;
  }

  .cv-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 999rem;
    background: var(--gradient-accent);
    color: var(--accent-text-over);
    border: none;
    font-size: var(--text-sm);
    line-height: 1.35;
    white-space: nowrap;
    text-decoration: none;
    transition: all 0.3s cubic-bezier(0.22, 1, 0.36, 1);
  }

  .cv-button:hover {
    background: var(--gradient-accent-orange);
    transform: translateY(-2px);
  }

  .cv-button:active {
    transform: translateY(1px);
  }

  .button-content {
    display: flex;
    align-items: center;
    justify-content: center; /* Ajout de cette propriété */
    gap: 0.5rem;
    z-index: 1;
    width: 100%; /* Ajout de cette propriété */
  }

  .download-progress {
    position: absolute;
    left: 0;
    bottom: 0;
    width: 0;
    height: 100%;
    background: linear-gradient(
      135deg,
      var(--accent-dark),
      var(--accent-regular)
    );
    opacity: 0.3;
  }

  .cv-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(var(--accent-regular), 0.25);
  }

  .cv-button:active {
    transform: translateY(1px);
  }

  .download-icon {
    width: 1.2rem;
    height: 1.2rem;
    transition: transform 0.3s ease;
  }

  .downloading .download-icon {
    animation: downloadPulse 1s ease infinite;
  }

  @keyframes downloadPulse {
    0%,
    100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(3px);
    }
  }

  .cv-button.downloading {
    pointer-events: none;
    opacity: 0.9;
  }

  .cv-button:hover .download-icon {
    transform: translateY(2px);
  }

  @media (min-width: 50em) {
    .hero {
      font-size: var(--text-xl);
    }

    .start {
      text-align: start;
    }

    .start .title,
    .start .tagline {
      margin-inline: unset;
    }

    .start .cv-button {
      margin-left: 0; /* Ajout de cette propriété */
    }

    .title {
      font-size: var(--text-5xl);
    }

    .roles {
      display: flex;
      gap: 0.5rem;
    }

    .cv-button {
      margin-top: 0;
      font-size: var(--text-base);
    }
  }
</style>
