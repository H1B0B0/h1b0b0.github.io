name: Deploy to GitHub Pages

on:
  # Trigger the workflow every time you push to the "main" branch
  push:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

# Allow this job to clone the repo and create a page deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install, build, and upload your site
        uses: withastro/action@v1
        # with:
        #   path: . # The root location of your Astro project inside the repository. (optional)
        #   node-version: 18 # The specific version of Node that should be used to build your site. Defaults to 18. (optional)
        #   package-manager: pnpm@latest # The Node package manager that should be used to install dependencies and build your site. Automatically detected based on your lockfile. (optional)

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

      # Add a step to determine the package manager
      - name: Determine Package Manager
        run: |
          len=$(echo $INPUT_PM | wc -c)
          if [ $len -gt 1 ]; then
            PACKAGE_MANAGER=$(echo "$INPUT_PM" | grep -o '^[^@]*')
            VERSION=$(echo "$INPUT_PM" | grep -o '@.*' | sed 's/^@//')
            # Set default VERSION if not provided
            if [ -z "$VERSION" ]; then
              VERSION="latest"
            fi
            echo "PACKAGE_MANAGER=$PACKAGE_MANAGER" >> $GITHUB_ENV
          elif [ -e "pnpm-lock.yaml" ]; then
            echo "PACKAGE_MANAGER=pnpm" >> $GITHUB_ENV
            echo "LOCKFILE=pnpm-lock.yaml" >> $GITHUB_ENV
          elif [ -e "yarn.lock" ]; then 
            echo "PACKAGE_MANAGER=yarn" >> $GITHUB_ENV
            echo "LOCKFILE=yarn.lock" >> $GITHUB_ENV
          elif [ -e "package-lock.json" ]; then 
            VERSION="latest"
            echo "PACKAGE_MANAGER=npm" >> $GITHUB_ENV
            echo "LOCKFILE=package-lock.json" >> $GITHUB_ENV
          elif [ -e "bun.lockb" ]; then 
            VERSION="latest"
            echo "PACKAGE_MANAGER=bun" >> $GITHUB_ENV
            echo "LOCKFILE=bun.lockb" >> $GITHUB_ENV
          else
            echo "No lockfile found.
            Please specify your preferred 'package-manager' in the action configuration."
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash
        env:
          INPUT_PM: ${{ github.event.inputs.package_manager }}
